
*****First Solution*****

class Solution {
public:
   
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans(2,-1);
        int n=nums.size();
        if(n==0)
            return ans;
        int s=0,e=n-1;
        while(s<e)
        {
            int mid = s+(e-s)/2;
            if(nums[mid]>=target)
                e=mid;
            else
                s=mid+1;
            
        }
        if(nums[s]!=target)
            return ans;
        ans[0]=s;
        e=n;
        while(s<e)
        {
            int mid=s+(e-s)/2;
            if(nums[mid]>target)
                e=mid;
            else
                s=mid+1;
            
            
        }
        ans[1]=s-1;
        return ans;
            
    }
};



*********Second Solution****

class Solution {
public:
    
    int firstOcc(vector<int> a, int t)
    {
        int l=0,h=a.size()-1,ans=-1;
        while(l<=h)
        {
            int mid = (l+h)/2;
            if(a[mid] == t)
            {
                ans = mid;
                h=mid-1;
            }else if(a[mid] > t)
                h=mid-1;
            else
                l=mid+1;
        }
        return ans;
    }
    
     int secondOcc(vector<int> a, int t)
    {
        int l=0,h=a.size()-1,ans=-1;
        while(l<=h)
        {
            int mid = (l+h)/2;
            if(a[mid] == t)
            {
                ans = mid;
                l=mid+1;
            }else if(a[mid] > t)
                h=mid-1;
            else
                l=mid+1;
        }
        return ans;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        return {firstOcc(nums,target), secondOcc(nums,target)};
    }
};
